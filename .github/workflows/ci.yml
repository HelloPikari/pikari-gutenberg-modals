name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run JavaScript linting
      run: npm run lint:js
    
    - name: Run CSS linting
      run: npm run lint:css

  php-lint:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: ['8.3', '8.4']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-version }}
        tools: composer:v2
        coverage: none
    
    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-progress
    
    - name: Run PHP linting
      run: composer lint

  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build plugin
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: build/

  test-js:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run JavaScript tests
      run: npm test -- --coverage
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-js
        path: tests/coverage/

  create-zip:
    needs: [lint, php-lint, build, test-js]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build plugin
      run: npm run build
    
    - name: Create plugin ZIP
      run: npm run plugin-zip
    
    - name: Upload plugin ZIP
      uses: actions/upload-artifact@v4
      with:
        name: pikari-gutenberg-modals
        path: pikari-gutenberg-modals.zip

  release:
    needs: [lint, php-lint, build, test-js]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install PHP dependencies (no dev)
      run: composer install --no-dev --optimize-autoloader
    
    - name: Build plugin
      run: npm run build
    
    - name: Create plugin ZIP
      run: npm run plugin-zip
    
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Extract release notes
      id: extract_notes
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        # Extract the section for this version from CHANGELOG.md
        sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' > release_notes.md
        echo "Release notes extracted for version $VERSION"
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: pikari-gutenberg-modals.zip
        body_path: release_notes.md
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, 'alpha') || contains(steps.get_version.outputs.VERSION, 'beta') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}